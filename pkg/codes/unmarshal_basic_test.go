package codes

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestUnmarshalBasic(t *testing.T) {
	data := []byte{0x81, 0x80, 0x5f, 0x22, 0x1, 0x1, 0x12, 0x1, 0x1,
		0x13, 0x1, 0x7f, 0x15, 0x1, 0x1, 0x17, 0x2, 0x3e, 0x80, 0x23, 0x1,
		0x79, 0xa4, 0x34, 0xd4, 0x6, 0x0, 0x1, 0x1, 0x0, 0x1, 0x2, 0xd6, 0x6,
		0x0, 0x1, 0x1, 0x0, 0x1, 0x2, 0xd8, 0x4, 0x0, 0x2, 0x3e, 0x80, 0xda,
		0x4, 0x0, 0x2, 0x3f, 0xf0, 0xe5, 0x6, 0x0, 0x1, 0x61, 0x0, 0x1, 0x62,
		0xd0, 0x6, 0x0, 0x1, 0x1, 0x0, 0x1, 0x2, 0xd1, 0x6, 0x0, 0x1, 0x1, 0x0,
		0x1, 0x2, 0x19, 0x2, 0x3f, 0xf0, 0xe6, 0x10, 0x80, 0x6, 0x27, 0x1, 0x5,
		0x28, 0x1, 0x2, 0x80, 0x6, 0x27, 0x1, 0x6, 0x28, 0x1, 0x3}

	testUnmarshalBasicString(t, data, "0x23", "y")
	testUnmarshalBasicInt32(t, data, "0x22", int32(1))
}

func runUnmarshalBasic(t *testing.T, codec YomoCodec, data []byte, mold *interface{}) {
	err := codec.UnmarshalBasic(data, mold)
	if err != nil {
		t.Errorf("got an err: %s", err.Error())
		t.FailNow()
	}
}

func testUnmarshalBasicString(t *testing.T, data []byte, observe string, expected string) {
	var msg = fmt.Sprintf("testing %s,  %v, (%X)", observe, expected, data)
	codec := NewCodec(observe)
	var mold interface{} = ""
	//_ = codec.UnmarshalBasic(data, &mold)
	runUnmarshalBasic(t, codec, data, &mold)
	//fmt.Printf("#55 mold=%v\n", mold)
	assert.Equal(t, expected, mold.(string), msg)
}

func testUnmarshalBasicInt32(t *testing.T, data []byte, observe string, expected int32) {
	var msg = fmt.Sprintf("testing %s,  %v, (%X)", observe, expected, data)
	codec := NewCodec(observe)
	var mold interface{} = int32(0)
	//fmt.Printf("#55 mold=%v\n", mold)
	//_ = codec.UnmarshalBasic(data, &mold)
	runUnmarshalBasic(t, codec, data, &mold)
	assert.Equal(t, expected, mold.(int32), msg)
}
